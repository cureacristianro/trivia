openapi: 3.0.0
info:
  title: TriviaGO API
  version: 3.0.0
  description: API complet pentru jocul TriviaGO cu gestionare utilizatori, multiplayer și sistem de scor
servers:
  - url: https://api.triviago.example.com/v1
  - url: http://localhost:8080/v1

paths:
  # --- AUTHENTICATION ---
  /auth/register:
    post:
      tags: [Authentication]
      summary: Înregistrare utilizator nou
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: Utilizator creat cu succes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Date de înregistrare invalide
        '409':
          description: Utilizator existent deja

  /auth/login:
    post:
      tags: [Authentication]
      summary: Autentificare utilizator
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginCredentials'
      responses:
        '200':
          description: Autentificare reușită
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Credențiale invalide

  # --- USERS ---
  /users/me:
    get:
      tags: [Users]
      summary: Obține profilul utilizatorului curent
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Detalii profil utilizator
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Neautorizat

  /users/{userId}:
    get:
      tags: [Users]
      summary: Obține profil public al utilizatorului
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Profil public utilizator
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUserProfile'
        '404':
          description: Utilizator negăsit

  # --- GAMES ---
  /games:
    post:
      tags: [Games]
      summary: Creează un joc nou
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GameConfig'
      responses:
        '201':
          description: Joc creat cu succes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        '400':
          description: Configurație invalidă

    get:
      tags: [Games]
      summary: Listă jocuri disponibile
      responses:
        '200':
          description: Listă jocuri active
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Game'

  /games/{gameId}:
    get:
      tags: [Games]
      summary: Detalii despre joc
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Detalii complete joc
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameDetails'
        '404':
          description: Joc negăsit

  /games/{gameId}/join:
    post:
      tags: [Games]
      summary: Alătură-te unui joc
      security:
        - bearerAuth: []
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Te-ai alăturat jocului
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        '404':
          description: Joc negăsit
        '409':
          description: Joc deja început

  /games/{gameId}/play:
    post:
      tags: [Games]
      summary: Trimite răspuns în joc
      security:
        - bearerAuth: []
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerAnswer'
      responses:
        '200':
          description: Răspuns procesat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameState'
        '400':
          description: Răspuns invalid

  # --- QUESTIONS ---
  /questions:
    get:
      tags: [Questions]
      summary: Obține întrebări
      parameters:
        - $ref: '#/components/parameters/category'
        - $ref: '#/components/parameters/difficulty'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/random'
      responses:
        '200':
          description: Listă întrebări
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'

  # --- LEADERBOARD ---
  /leaderboard:
    get:
      tags: [Leaderboard]
      summary: Clasament global
      parameters:
        - name: period
          in: query
          schema:
            type: string
            enum: [daily, weekly, monthly, alltime]
          description: Perioadă pentru clasament
      responses:
        '200':
          description: Clasament jucători
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LeaderboardEntry'

components:
  schemas:
    # --- AUTHENTICATION ---
    UserRegistration:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 20
          example: "jucator_expert"
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          format: password
          minLength: 8
          pattern: '^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{8,}$'

    LoginCredentials:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        user:
          $ref: '#/components/schemas/User'

    # --- USERS ---
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
        created_at:
          type: string
          format: date-time
        last_login:
          type: string
          format: date-time

    UserProfile:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            stats:
              $ref: '#/components/schemas/UserStats'
            preferences:
              $ref: '#/components/schemas/UserPreferences'

    PublicUserProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        stats:
          $ref: '#/components/schemas/UserStats'

    UserStats:
      type: object
      properties:
        total_games:
          type: integer
        wins:
          type: integer
        average_score:
          type: number
        total_points:
          type: integer
        fastest_answer:
          type: number

    UserPreferences:
      type: object
      properties:
        theme:
          type: string
          enum: [light, dark]
        notifications:
          type: boolean

    # --- GAMES ---
    GameConfig:
      type: object
      properties:
        board:
          $ref: '#/components/schemas/BoardConfig'
        questions:
          $ref: '#/components/schemas/QuestionFilters'
        max_players:
          type: integer
          minimum: 2
          maximum: 6

    BoardConfig:
      type: object
      properties:
        cells:
          type: integer
          default: 20
        bonus_cells:
          type: array
          items:
            type: integer
          example: [3,7,12,17]
        penalty_cells:
          type: array
          items:
            type: integer
          example: [2,5,9]

    QuestionFilters:
      type: object
      properties:
        categories:
          type: array
          items:
            type: string
        difficulties:
          type: array
          items:
            type: string
            enum: [easy, medium, hard]

    Game:
      type: object
      properties:
        id:
          type: string
          format: uuid
        status:
          type: string
          enum: [waiting, active, finished]
        players:
          type: array
          items:
            $ref: '#/components/schemas/Player'
        current_question:
          $ref: '#/components/schemas/Question'
        created_at:
          type: string
          format: date-time

    GameDetails:
      allOf:
        - $ref: '#/components/schemas/Game'
        - type: object
          properties:
            board_state:
              type: array
              items:
                $ref: '#/components/schemas/BoardCell'

    BoardCell:
      type: object
      properties:
        position:
          type: integer
        type:
          type: string
          enum: [normal, bonus, penalty]
        players:
          type: array
          items:
            type: string

    Player:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
        username:
          type: string
        score:
          type: integer
        position:
          type: integer
        color:
          type: string
        last_answer:
          type: string
          format: date-time

    PlayerAnswer:
      type: object
      required:
        - question_id
        - answer
      properties:
        question_id:
          type: string
          format: uuid
        answer:
          type: string

    GameState:
      type: object
      properties:
        correct:
          type: boolean
        score_change:
          type: integer
        new_position:
          type: integer
        next_question:
          $ref: '#/components/schemas/Question'

    # --- QUESTIONS ---
    Question:
      type: object
      properties:
        id:
          type: string
          format: uuid
        category:
          type: string
        difficulty:
          type: string
          enum: [easy, medium, hard]
        question:
          type: string
        options:
          type: array
          items:
            type: string
        correct_answer:
          type: string
        explanation:
          type: string

    # --- LEADERBOARD ---
    LeaderboardEntry:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/PublicUserProfile'
        rank:
          type: integer
        score:
          type: integer
        games_won:
          type: integer

  parameters:
    category:
      name: category
      in: query
      schema:
        type: string
      description: Filtrează după categorie

    difficulty:
      name: difficulty
      in: query
      schema:
        type: string
        enum: [easy, medium, hard]

    limit:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 50
      default: 10

    random:
      name: random
      in: query
      schema:
        type: boolean
      default: true

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT